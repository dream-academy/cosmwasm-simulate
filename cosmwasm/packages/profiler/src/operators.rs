use std::hash::Hash;

use loupe::MemoryUsage;
use wasmer::wasmparser::Operator;

#[derive(Debug, Clone, Hash, PartialEq, Eq, MemoryUsage)]
pub enum OperatorSymbol {
    Unreachable,
    Nop,
    Block,
    Loop,
    If,
    Else,
    Try,
    Catch,
    Throw,
    Rethrow,
    End,
    Br,
    BrIf,
    BrTable,
    Return,
    Call,
    CallIndirect,
    ReturnCall,
    ReturnCallIndirect,
    Delegate,
    CatchAll,
    Drop,
    Select,
    TypedSelect,
    LocalGet,
    LocalSet,
    LocalTee,
    GlobalGet,
    GlobalSet,
    I32Load,
    I64Load,
    F32Load,
    F64Load,
    I32Load8S,
    I32Load8U,
    I32Load16S,
    I32Load16U,
    I64Load8S,
    I64Load8U,
    I64Load16S,
    I64Load16U,
    I64Load32S,
    I64Load32U,
    I32Store,
    I64Store,
    F32Store,
    F64Store,
    I32Store8,
    I32Store16,
    I64Store8,
    I64Store16,
    I64Store32,
    MemorySize,
    MemoryGrow,
    I32Const,
    I64Const,
    F32Const,
    F64Const,
    RefNull,
    RefIsNull,
    RefFunc,
    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtS,
    I32LtU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32GeS,
    I32GeU,
    I64Eqz,
    I64Eq,
    I64Ne,
    I64LtS,
    I64LtU,
    I64GtS,
    I64GtU,
    I64LeS,
    I64LeU,
    I64GeS,
    I64GeU,
    F32Eq,
    F32Ne,
    F32Lt,
    F32Gt,
    F32Le,
    F32Ge,
    F64Eq,
    F64Ne,
    F64Lt,
    F64Gt,
    F64Le,
    F64Ge,
    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Rotl,
    I32Rotr,
    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Rotl,
    I64Rotr,
    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32Copysign,
    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64Copysign,
    I32WrapI64,
    I32TruncF32S,
    I32TruncF32U,
    I32TruncF64S,
    I32TruncF64U,
    I64ExtendI32S,
    I64ExtendI32U,
    I64TruncF32S,
    I64TruncF32U,
    I64TruncF64S,
    I64TruncF64U,
    F32ConvertI32S,
    F32ConvertI32U,
    F32ConvertI64S,
    F32ConvertI64U,
    F32DemoteF64,
    F64ConvertI32S,
    F64ConvertI32U,
    F64ConvertI64S,
    F64ConvertI64U,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
    I32Extend8S,
    I32Extend16S,
    I64Extend8S,
    I64Extend16S,
    I64Extend32S,

    // 0xFC operators
    // Non-trapping Float-to-int Conversions
    I32TruncSatF32S,
    I32TruncSatF32U,
    I32TruncSatF64S,
    I32TruncSatF64U,
    I64TruncSatF32S,
    I64TruncSatF32U,
    I64TruncSatF64S,
    I64TruncSatF64U,

    // 0xFC operators
    // bulk memory https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md
    MemoryInit,
    DataDrop,
    MemoryCopy,
    MemoryFill,
    TableInit,
    ElemDrop,
    TableCopy,
    TableFill,
    TableGet,
    TableSet,
    TableGrow,
    TableSize,

    // 0xFE operators
    // https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md
    MemoryAtomicNotify,
    MemoryAtomicWait32,
    MemoryAtomicWait64,
    AtomicFence,
    I32AtomicLoad,
    I64AtomicLoad,
    I32AtomicLoad8U,
    I32AtomicLoad16U,
    I64AtomicLoad8U,
    I64AtomicLoad16U,
    I64AtomicLoad32U,
    I32AtomicStore,
    I64AtomicStore,
    I32AtomicStore8,
    I32AtomicStore16,
    I64AtomicStore8,
    I64AtomicStore16,
    I64AtomicStore32,
    I32AtomicRmwAdd,
    I64AtomicRmwAdd,
    I32AtomicRmw8AddU,
    I32AtomicRmw16AddU,
    I64AtomicRmw8AddU,
    I64AtomicRmw16AddU,
    I64AtomicRmw32AddU,
    I32AtomicRmwSub,
    I64AtomicRmwSub,
    I32AtomicRmw8SubU,
    I32AtomicRmw16SubU,
    I64AtomicRmw8SubU,
    I64AtomicRmw16SubU,
    I64AtomicRmw32SubU,
    I32AtomicRmwAnd,
    I64AtomicRmwAnd,
    I32AtomicRmw8AndU,
    I32AtomicRmw16AndU,
    I64AtomicRmw8AndU,
    I64AtomicRmw16AndU,
    I64AtomicRmw32AndU,
    I32AtomicRmwOr,
    I64AtomicRmwOr,
    I32AtomicRmw8OrU,
    I32AtomicRmw16OrU,
    I64AtomicRmw8OrU,
    I64AtomicRmw16OrU,
    I64AtomicRmw32OrU,
    I32AtomicRmwXor,
    I64AtomicRmwXor,
    I32AtomicRmw8XorU,
    I32AtomicRmw16XorU,
    I64AtomicRmw8XorU,
    I64AtomicRmw16XorU,
    I64AtomicRmw32XorU,
    I32AtomicRmwXchg,
    I64AtomicRmwXchg,
    I32AtomicRmw8XchgU,
    I32AtomicRmw16XchgU,
    I64AtomicRmw8XchgU,
    I64AtomicRmw16XchgU,
    I64AtomicRmw32XchgU,
    I32AtomicRmwCmpxchg,
    I64AtomicRmwCmpxchg,
    I32AtomicRmw8CmpxchgU,
    I32AtomicRmw16CmpxchgU,
    I64AtomicRmw8CmpxchgU,
    I64AtomicRmw16CmpxchgU,
    I64AtomicRmw32CmpxchgU,

    // 0xFD operators
    // SIMD https://webassembly.github.io/simd/core/binary/instructions.html
    V128Load,
    V128Load8x8S,
    V128Load8x8U,
    V128Load16x4S,
    V128Load16x4U,
    V128Load32x2S,
    V128Load32x2U,
    V128Load8Splat,
    V128Load16Splat,
    V128Load32Splat,
    V128Load64Splat,
    V128Load32Zero,
    V128Load64Zero,
    V128Store,
    V128Load8Lane,
    V128Load16Lane,
    V128Load32Lane,
    V128Load64Lane,
    V128Store8Lane,
    V128Store16Lane,
    V128Store32Lane,
    V128Store64Lane,
    V128Const,
    I8x16Shuffle,
    I8x16ExtractLaneS,
    I8x16ExtractLaneU,
    I8x16ReplaceLane,
    I16x8ExtractLaneS,
    I16x8ExtractLaneU,
    I16x8ReplaceLane,
    I32x4ExtractLane,
    I32x4ReplaceLane,
    I64x2ExtractLane,
    I64x2ReplaceLane,
    F32x4ExtractLane,
    F32x4ReplaceLane,
    F64x2ExtractLane,
    F64x2ReplaceLane,
    I8x16Swizzle,
    I8x16Splat,
    I16x8Splat,
    I32x4Splat,
    I64x2Splat,
    F32x4Splat,
    F64x2Splat,
    I8x16Eq,
    I8x16Ne,
    I8x16LtS,
    I8x16LtU,
    I8x16GtS,
    I8x16GtU,
    I8x16LeS,
    I8x16LeU,
    I8x16GeS,
    I8x16GeU,
    I16x8Eq,
    I16x8Ne,
    I16x8LtS,
    I16x8LtU,
    I16x8GtS,
    I16x8GtU,
    I16x8LeS,
    I16x8LeU,
    I16x8GeS,
    I16x8GeU,
    I32x4Eq,
    I32x4Ne,
    I32x4LtS,
    I32x4LtU,
    I32x4GtS,
    I32x4GtU,
    I32x4LeS,
    I32x4LeU,
    I32x4GeS,
    I32x4GeU,
    I64x2Eq,
    I64x2Ne,
    I64x2LtS,
    I64x2GtS,
    I64x2LeS,
    I64x2GeS,
    F32x4Eq,
    F32x4Ne,
    F32x4Lt,
    F32x4Gt,
    F32x4Le,
    F32x4Ge,
    F64x2Eq,
    F64x2Ne,
    F64x2Lt,
    F64x2Gt,
    F64x2Le,
    F64x2Ge,
    V128Not,
    V128And,
    V128AndNot,
    V128Or,
    V128Xor,
    V128Bitselect,
    V128AnyTrue,
    I8x16Abs,
    I8x16Neg,
    I8x16Popcnt,
    I8x16AllTrue,
    I8x16Bitmask,
    I8x16NarrowI16x8S,
    I8x16NarrowI16x8U,
    I8x16Shl,
    I8x16ShrS,
    I8x16ShrU,
    I8x16Add,
    I8x16AddSatS,
    I8x16AddSatU,
    I8x16Sub,
    I8x16SubSatS,
    I8x16SubSatU,
    I8x16MinS,
    I8x16MinU,
    I8x16MaxS,
    I8x16MaxU,
    I8x16RoundingAverageU,
    I16x8ExtAddPairwiseI8x16S,
    I16x8ExtAddPairwiseI8x16U,
    I16x8Abs,
    I16x8Neg,
    I16x8Q15MulrSatS,
    I16x8AllTrue,
    I16x8Bitmask,
    I16x8NarrowI32x4S,
    I16x8NarrowI32x4U,
    I16x8ExtendLowI8x16S,
    I16x8ExtendHighI8x16S,
    I16x8ExtendLowI8x16U,
    I16x8ExtendHighI8x16U,
    I16x8Shl,
    I16x8ShrS,
    I16x8ShrU,
    I16x8Add,
    I16x8AddSatS,
    I16x8AddSatU,
    I16x8Sub,
    I16x8SubSatS,
    I16x8SubSatU,
    I16x8Mul,
    I16x8MinS,
    I16x8MinU,
    I16x8MaxS,
    I16x8MaxU,
    I16x8RoundingAverageU,
    I16x8ExtMulLowI8x16S,
    I16x8ExtMulHighI8x16S,
    I16x8ExtMulLowI8x16U,
    I16x8ExtMulHighI8x16U,
    I32x4ExtAddPairwiseI16x8S,
    I32x4ExtAddPairwiseI16x8U,
    I32x4Abs,
    I32x4Neg,
    I32x4AllTrue,
    I32x4Bitmask,
    I32x4ExtendLowI16x8S,
    I32x4ExtendHighI16x8S,
    I32x4ExtendLowI16x8U,
    I32x4ExtendHighI16x8U,
    I32x4Shl,
    I32x4ShrS,
    I32x4ShrU,
    I32x4Add,
    I32x4Sub,
    I32x4Mul,
    I32x4MinS,
    I32x4MinU,
    I32x4MaxS,
    I32x4MaxU,
    I32x4DotI16x8S,
    I32x4ExtMulLowI16x8S,
    I32x4ExtMulHighI16x8S,
    I32x4ExtMulLowI16x8U,
    I32x4ExtMulHighI16x8U,
    I64x2Abs,
    I64x2Neg,
    I64x2AllTrue,
    I64x2Bitmask,
    I64x2ExtendLowI32x4S,
    I64x2ExtendHighI32x4S,
    I64x2ExtendLowI32x4U,
    I64x2ExtendHighI32x4U,
    I64x2Shl,
    I64x2ShrS,
    I64x2ShrU,
    I64x2Add,
    I64x2Sub,
    I64x2Mul,
    I64x2ExtMulLowI32x4S,
    I64x2ExtMulHighI32x4S,
    I64x2ExtMulLowI32x4U,
    I64x2ExtMulHighI32x4U,
    F32x4Ceil,
    F32x4Floor,
    F32x4Trunc,
    F32x4Nearest,
    F32x4Abs,
    F32x4Neg,
    F32x4Sqrt,
    F32x4Add,
    F32x4Sub,
    F32x4Mul,
    F32x4Div,
    F32x4Min,
    F32x4Max,
    F32x4PMin,
    F32x4PMax,
    F64x2Ceil,
    F64x2Floor,
    F64x2Trunc,
    F64x2Nearest,
    F64x2Abs,
    F64x2Neg,
    F64x2Sqrt,
    F64x2Add,
    F64x2Sub,
    F64x2Mul,
    F64x2Div,
    F64x2Min,
    F64x2Max,
    F64x2PMin,
    F64x2PMax,
    I32x4TruncSatF32x4S,
    I32x4TruncSatF32x4U,
    F32x4ConvertI32x4S,
    F32x4ConvertI32x4U,
    I32x4TruncSatF64x2SZero,
    I32x4TruncSatF64x2UZero,
    F64x2ConvertLowI32x4S,
    F64x2ConvertLowI32x4U,
    F32x4DemoteF64x2Zero,
    F64x2PromoteLowF32x4,

    // unsorted
    I8x16RelaxedSwizzle,
    I32x4RelaxedTruncSatF32x4S,
    I32x4RelaxedTruncSatF32x4U,
    I32x4RelaxedTruncSatF64x2SZero,
    I32x4RelaxedTruncSatF64x2UZero,
    F32x4Fma,
    F32x4Fms,
    F64x2Fma,
    F64x2Fms,
    I8x16LaneSelect,
    I16x8LaneSelect,
    I32x4LaneSelect,
    I64x2LaneSelect,
    F32x4RelaxedMin,
    F32x4RelaxedMax,
    F64x2RelaxedMin,
    F64x2RelaxedMax,
}

impl From<&Operator<'_>> for OperatorSymbol {
    fn from(op: &Operator<'_>) -> Self {
        match op {
            Operator::Unreachable => OperatorSymbol::Unreachable,
            Operator::Nop => OperatorSymbol::Nop,
            Operator::Block { .. } => OperatorSymbol::Block,
            Operator::Loop { .. } => OperatorSymbol::Loop,
            Operator::If { .. } => OperatorSymbol::If,
            Operator::Else => OperatorSymbol::Else,
            Operator::Try { .. } => OperatorSymbol::Try,
            Operator::Catch { .. } => OperatorSymbol::Catch,
            Operator::Throw { .. } => OperatorSymbol::Throw,
            Operator::Rethrow { .. } => OperatorSymbol::Rethrow,
            Operator::End => OperatorSymbol::End,
            Operator::Br { .. } => OperatorSymbol::Br,
            Operator::BrIf { .. } => OperatorSymbol::BrIf,
            Operator::BrTable { .. } => OperatorSymbol::BrTable,
            Operator::Return => OperatorSymbol::Return,
            Operator::Call { .. } => OperatorSymbol::Call,
            Operator::CallIndirect { .. } => OperatorSymbol::CallIndirect,
            Operator::ReturnCall { .. } => OperatorSymbol::ReturnCall,
            Operator::ReturnCallIndirect { .. } => OperatorSymbol::ReturnCallIndirect,
            Operator::Delegate { .. } => OperatorSymbol::Delegate,
            Operator::CatchAll => OperatorSymbol::CatchAll,
            Operator::Drop => OperatorSymbol::Drop,
            Operator::Select => OperatorSymbol::Select,
            Operator::TypedSelect { .. } => OperatorSymbol::TypedSelect,
            Operator::LocalGet { .. } => OperatorSymbol::LocalGet,
            Operator::LocalSet { .. } => OperatorSymbol::LocalSet,
            Operator::LocalTee { .. } => OperatorSymbol::LocalTee,
            Operator::GlobalGet { .. } => OperatorSymbol::GlobalGet,
            Operator::GlobalSet { .. } => OperatorSymbol::GlobalSet,
            Operator::I32Load { .. } => OperatorSymbol::I32Load,
            Operator::I64Load { .. } => OperatorSymbol::I64Load,
            Operator::F32Load { .. } => OperatorSymbol::F32Load,
            Operator::F64Load { .. } => OperatorSymbol::F64Load,
            Operator::I32Load8S { .. } => OperatorSymbol::I32Load8S,
            Operator::I32Load8U { .. } => OperatorSymbol::I32Load8U,
            Operator::I32Load16S { .. } => OperatorSymbol::I32Load16S,
            Operator::I32Load16U { .. } => OperatorSymbol::I32Load16U,
            Operator::I64Load8S { .. } => OperatorSymbol::I64Load8S,
            Operator::I64Load8U { .. } => OperatorSymbol::I64Load8U,
            Operator::I64Load16S { .. } => OperatorSymbol::I64Load16S,
            Operator::I64Load16U { .. } => OperatorSymbol::I64Load16U,
            Operator::I64Load32S { .. } => OperatorSymbol::I64Load32S,
            Operator::I64Load32U { .. } => OperatorSymbol::I64Load32U,
            Operator::I32Store { .. } => OperatorSymbol::I32Store,
            Operator::I64Store { .. } => OperatorSymbol::I64Store,
            Operator::F32Store { .. } => OperatorSymbol::F32Store,
            Operator::F64Store { .. } => OperatorSymbol::F64Store,
            Operator::I32Store8 { .. } => OperatorSymbol::I32Store8,
            Operator::I32Store16 { .. } => OperatorSymbol::I32Store16,
            Operator::I64Store8 { .. } => OperatorSymbol::I64Store8,
            Operator::I64Store16 { .. } => OperatorSymbol::I64Store16,
            Operator::I64Store32 { .. } => OperatorSymbol::I64Store32,
            Operator::MemorySize { .. } => OperatorSymbol::MemorySize,
            Operator::MemoryGrow { .. } => OperatorSymbol::MemoryGrow,
            Operator::I32Const { .. } => OperatorSymbol::I32Const,
            Operator::I64Const { .. } => OperatorSymbol::I64Const,
            Operator::F32Const { .. } => OperatorSymbol::F32Const,
            Operator::F64Const { .. } => OperatorSymbol::F64Const,
            Operator::RefNull { .. } => OperatorSymbol::RefNull,
            Operator::RefIsNull => OperatorSymbol::RefIsNull,
            Operator::RefFunc { .. } => OperatorSymbol::RefFunc,
            Operator::I32Eqz => OperatorSymbol::I32Eqz,
            Operator::I32Eq => OperatorSymbol::I32Eq,
            Operator::I32Ne => OperatorSymbol::I32Ne,
            Operator::I32LtS => OperatorSymbol::I32LtS,
            Operator::I32LtU => OperatorSymbol::I32LtU,
            Operator::I32GtS => OperatorSymbol::I32GtS,
            Operator::I32GtU => OperatorSymbol::I32GtU,
            Operator::I32LeS => OperatorSymbol::I32LeS,
            Operator::I32LeU => OperatorSymbol::I32LeU,
            Operator::I32GeS => OperatorSymbol::I32GeS,
            Operator::I32GeU => OperatorSymbol::I32GeU,
            Operator::I64Eqz => OperatorSymbol::I64Eqz,
            Operator::I64Eq => OperatorSymbol::I64Eq,
            Operator::I64Ne => OperatorSymbol::I64Ne,
            Operator::I64LtS => OperatorSymbol::I64LtS,
            Operator::I64LtU => OperatorSymbol::I64LtU,
            Operator::I64GtS => OperatorSymbol::I64GtS,
            Operator::I64GtU => OperatorSymbol::I64GtU,
            Operator::I64LeS => OperatorSymbol::I64LeS,
            Operator::I64LeU => OperatorSymbol::I64LeU,
            Operator::I64GeS => OperatorSymbol::I64GeS,
            Operator::I64GeU => OperatorSymbol::I64GeU,
            Operator::F32Eq => OperatorSymbol::F32Eq,
            Operator::F32Ne => OperatorSymbol::F32Ne,
            Operator::F32Lt => OperatorSymbol::F32Lt,
            Operator::F32Gt => OperatorSymbol::F32Gt,
            Operator::F32Le => OperatorSymbol::F32Le,
            Operator::F32Ge => OperatorSymbol::F32Ge,
            Operator::F64Eq => OperatorSymbol::F64Eq,
            Operator::F64Ne => OperatorSymbol::F64Ne,
            Operator::F64Lt => OperatorSymbol::F64Lt,
            Operator::F64Gt => OperatorSymbol::F64Gt,
            Operator::F64Le => OperatorSymbol::F64Le,
            Operator::F64Ge => OperatorSymbol::F64Ge,
            Operator::I32Clz => OperatorSymbol::I32Clz,
            Operator::I32Ctz => OperatorSymbol::I32Ctz,
            Operator::I32Popcnt => OperatorSymbol::I32Popcnt,
            Operator::I32Add => OperatorSymbol::I32Add,
            Operator::I32Sub => OperatorSymbol::I32Sub,
            Operator::I32Mul => OperatorSymbol::I32Mul,
            Operator::I32DivS => OperatorSymbol::I32DivS,
            Operator::I32DivU => OperatorSymbol::I32DivU,
            Operator::I32RemS => OperatorSymbol::I32RemS,
            Operator::I32RemU => OperatorSymbol::I32RemU,
            Operator::I32And => OperatorSymbol::I32And,
            Operator::I32Or => OperatorSymbol::I32Or,
            Operator::I32Xor => OperatorSymbol::I32Xor,
            Operator::I32Shl => OperatorSymbol::I32Shl,
            Operator::I32ShrS => OperatorSymbol::I32ShrS,
            Operator::I32ShrU => OperatorSymbol::I32ShrU,
            Operator::I32Rotl => OperatorSymbol::I32Rotl,
            Operator::I32Rotr => OperatorSymbol::I32Rotr,
            Operator::I64Clz => OperatorSymbol::I64Clz,
            Operator::I64Ctz => OperatorSymbol::I64Ctz,
            Operator::I64Popcnt => OperatorSymbol::I64Popcnt,
            Operator::I64Add => OperatorSymbol::I64Add,
            Operator::I64Sub => OperatorSymbol::I64Sub,
            Operator::I64Mul => OperatorSymbol::I64Mul,
            Operator::I64DivS => OperatorSymbol::I64DivS,
            Operator::I64DivU => OperatorSymbol::I64DivU,
            Operator::I64RemS => OperatorSymbol::I64RemS,
            Operator::I64RemU => OperatorSymbol::I64RemU,
            Operator::I64And => OperatorSymbol::I64And,
            Operator::I64Or => OperatorSymbol::I64Or,
            Operator::I64Xor => OperatorSymbol::I64Xor,
            Operator::I64Shl => OperatorSymbol::I64Shl,
            Operator::I64ShrS => OperatorSymbol::I64ShrS,
            Operator::I64ShrU => OperatorSymbol::I64ShrU,
            Operator::I64Rotl => OperatorSymbol::I64Rotl,
            Operator::I64Rotr => OperatorSymbol::I64Rotr,
            Operator::F32Abs => OperatorSymbol::F32Abs,
            Operator::F32Neg => OperatorSymbol::F32Neg,
            Operator::F32Ceil => OperatorSymbol::F32Ceil,
            Operator::F32Floor => OperatorSymbol::F32Floor,
            Operator::F32Trunc => OperatorSymbol::F32Trunc,
            Operator::F32Nearest => OperatorSymbol::F32Nearest,
            Operator::F32Sqrt => OperatorSymbol::F32Sqrt,
            Operator::F32Add => OperatorSymbol::F32Add,
            Operator::F32Sub => OperatorSymbol::F32Sub,
            Operator::F32Mul => OperatorSymbol::F32Mul,
            Operator::F32Div => OperatorSymbol::F32Div,
            Operator::F32Min => OperatorSymbol::F32Min,
            Operator::F32Max => OperatorSymbol::F32Max,
            Operator::F32Copysign => OperatorSymbol::F32Copysign,
            Operator::F64Abs => OperatorSymbol::F64Abs,
            Operator::F64Neg => OperatorSymbol::F64Neg,
            Operator::F64Ceil => OperatorSymbol::F64Ceil,
            Operator::F64Floor => OperatorSymbol::F64Floor,
            Operator::F64Trunc => OperatorSymbol::F64Trunc,
            Operator::F64Nearest => OperatorSymbol::F64Nearest,
            Operator::F64Sqrt => OperatorSymbol::F64Sqrt,
            Operator::F64Add => OperatorSymbol::F64Add,
            Operator::F64Sub => OperatorSymbol::F64Sub,
            Operator::F64Mul => OperatorSymbol::F64Mul,
            Operator::F64Div => OperatorSymbol::F64Div,
            Operator::F64Min => OperatorSymbol::F64Min,
            Operator::F64Max => OperatorSymbol::F64Max,
            Operator::F64Copysign => OperatorSymbol::F64Copysign,
            Operator::I32WrapI64 => OperatorSymbol::I32WrapI64,
            Operator::I32TruncF32S => OperatorSymbol::I32TruncF32S,
            Operator::I32TruncF32U => OperatorSymbol::I32TruncF32U,
            Operator::I32TruncF64S => OperatorSymbol::I32TruncF64S,
            Operator::I32TruncF64U => OperatorSymbol::I32TruncF64U,
            Operator::I64ExtendI32S => OperatorSymbol::I64ExtendI32S,
            Operator::I64ExtendI32U => OperatorSymbol::I64ExtendI32U,
            Operator::I64TruncF32S => OperatorSymbol::I64TruncF32S,
            Operator::I64TruncF32U => OperatorSymbol::I64TruncF32U,
            Operator::I64TruncF64S => OperatorSymbol::I64TruncF64S,
            Operator::I64TruncF64U => OperatorSymbol::I64TruncF64U,
            Operator::F32ConvertI32S => OperatorSymbol::F32ConvertI32S,
            Operator::F32ConvertI32U => OperatorSymbol::F32ConvertI32U,
            Operator::F32ConvertI64S => OperatorSymbol::F32ConvertI64S,
            Operator::F32ConvertI64U => OperatorSymbol::F32ConvertI64U,
            Operator::F32DemoteF64 => OperatorSymbol::F32DemoteF64,
            Operator::F64ConvertI32S => OperatorSymbol::F64ConvertI32S,
            Operator::F64ConvertI32U => OperatorSymbol::F64ConvertI32U,
            Operator::F64ConvertI64S => OperatorSymbol::F64ConvertI64S,
            Operator::F64ConvertI64U => OperatorSymbol::F64ConvertI64U,
            Operator::F64PromoteF32 => OperatorSymbol::F64PromoteF32,
            Operator::I32ReinterpretF32 => OperatorSymbol::I32ReinterpretF32,
            Operator::I64ReinterpretF64 => OperatorSymbol::I64ReinterpretF64,
            Operator::F32ReinterpretI32 => OperatorSymbol::F32ReinterpretI32,
            Operator::F64ReinterpretI64 => OperatorSymbol::F64ReinterpretI64,
            Operator::I32Extend8S => OperatorSymbol::I32Extend8S,
            Operator::I32Extend16S => OperatorSymbol::I32Extend16S,
            Operator::I64Extend8S => OperatorSymbol::I64Extend8S,
            Operator::I64Extend16S => OperatorSymbol::I64Extend16S,
            Operator::I64Extend32S => OperatorSymbol::I64Extend32S,

            // 0xFC operators
            // Non-trapping Float-to-int Conversions
            Operator::I32TruncSatF32S => OperatorSymbol::I32TruncSatF32S,
            Operator::I32TruncSatF32U => OperatorSymbol::I32TruncSatF32U,
            Operator::I32TruncSatF64S => OperatorSymbol::I32TruncSatF64S,
            Operator::I32TruncSatF64U => OperatorSymbol::I32TruncSatF64U,
            Operator::I64TruncSatF32S => OperatorSymbol::I64TruncSatF32S,
            Operator::I64TruncSatF32U => OperatorSymbol::I64TruncSatF32U,
            Operator::I64TruncSatF64S => OperatorSymbol::I64TruncSatF64S,
            Operator::I64TruncSatF64U => OperatorSymbol::I64TruncSatF64U,

            // 0xFC operators
            // bulk memory https://github.com/WebAssembly/bulk-memory-operations/blob/master/proposals/bulk-memory-operations/Overview.md
            Operator::MemoryInit { .. } => OperatorSymbol::MemoryInit,
            Operator::DataDrop { .. } => OperatorSymbol::DataDrop,
            Operator::MemoryCopy { .. } => OperatorSymbol::MemoryCopy,
            Operator::MemoryFill { .. } => OperatorSymbol::MemoryFill,
            Operator::TableInit { .. } => OperatorSymbol::TableInit,
            Operator::ElemDrop { .. } => OperatorSymbol::ElemDrop,
            Operator::TableCopy { .. } => OperatorSymbol::TableCopy,
            Operator::TableFill { .. } => OperatorSymbol::TableFill,
            Operator::TableGet { .. } => OperatorSymbol::TableGet,
            Operator::TableSet { .. } => OperatorSymbol::TableSet,
            Operator::TableGrow { .. } => OperatorSymbol::TableGrow,
            Operator::TableSize { .. } => OperatorSymbol::TableSize,

            // 0xFE operators
            // https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md
            Operator::MemoryAtomicNotify { .. } => OperatorSymbol::MemoryAtomicNotify,
            Operator::MemoryAtomicWait32 { .. } => OperatorSymbol::MemoryAtomicWait32,
            Operator::MemoryAtomicWait64 { .. } => OperatorSymbol::MemoryAtomicWait64,
            Operator::AtomicFence { .. } => OperatorSymbol::AtomicFence,
            Operator::I32AtomicLoad { .. } => OperatorSymbol::I32AtomicLoad,
            Operator::I64AtomicLoad { .. } => OperatorSymbol::I64AtomicLoad,
            Operator::I32AtomicLoad8U { .. } => OperatorSymbol::I32AtomicLoad8U,
            Operator::I32AtomicLoad16U { .. } => OperatorSymbol::I32AtomicLoad16U,
            Operator::I64AtomicLoad8U { .. } => OperatorSymbol::I64AtomicLoad8U,
            Operator::I64AtomicLoad16U { .. } => OperatorSymbol::I64AtomicLoad16U,
            Operator::I64AtomicLoad32U { .. } => OperatorSymbol::I64AtomicLoad32U,
            Operator::I32AtomicStore { .. } => OperatorSymbol::I32AtomicStore,
            Operator::I64AtomicStore { .. } => OperatorSymbol::I64AtomicStore,
            Operator::I32AtomicStore8 { .. } => OperatorSymbol::I32AtomicStore8,
            Operator::I32AtomicStore16 { .. } => OperatorSymbol::I32AtomicStore16,
            Operator::I64AtomicStore8 { .. } => OperatorSymbol::I64AtomicStore8,
            Operator::I64AtomicStore16 { .. } => OperatorSymbol::I64AtomicStore16,
            Operator::I64AtomicStore32 { .. } => OperatorSymbol::I64AtomicStore32,
            Operator::I32AtomicRmwAdd { .. } => OperatorSymbol::I32AtomicRmwAdd,
            Operator::I64AtomicRmwAdd { .. } => OperatorSymbol::I64AtomicRmwAdd,
            Operator::I32AtomicRmw8AddU { .. } => OperatorSymbol::I32AtomicRmw8AddU,
            Operator::I32AtomicRmw16AddU { .. } => OperatorSymbol::I32AtomicRmw16AddU,
            Operator::I64AtomicRmw8AddU { .. } => OperatorSymbol::I64AtomicRmw8AddU,
            Operator::I64AtomicRmw16AddU { .. } => OperatorSymbol::I64AtomicRmw16AddU,
            Operator::I64AtomicRmw32AddU { .. } => OperatorSymbol::I64AtomicRmw32AddU,
            Operator::I32AtomicRmwSub { .. } => OperatorSymbol::I32AtomicRmwSub,
            Operator::I64AtomicRmwSub { .. } => OperatorSymbol::I64AtomicRmwSub,
            Operator::I32AtomicRmw8SubU { .. } => OperatorSymbol::I32AtomicRmw8SubU,
            Operator::I32AtomicRmw16SubU { .. } => OperatorSymbol::I32AtomicRmw16SubU,
            Operator::I64AtomicRmw8SubU { .. } => OperatorSymbol::I64AtomicRmw8SubU,
            Operator::I64AtomicRmw16SubU { .. } => OperatorSymbol::I64AtomicRmw16SubU,
            Operator::I64AtomicRmw32SubU { .. } => OperatorSymbol::I64AtomicRmw32SubU,
            Operator::I32AtomicRmwAnd { .. } => OperatorSymbol::I32AtomicRmwAnd,
            Operator::I64AtomicRmwAnd { .. } => OperatorSymbol::I64AtomicRmwAnd,
            Operator::I32AtomicRmw8AndU { .. } => OperatorSymbol::I32AtomicRmw8AndU,
            Operator::I32AtomicRmw16AndU { .. } => OperatorSymbol::I32AtomicRmw16AndU,
            Operator::I64AtomicRmw8AndU { .. } => OperatorSymbol::I64AtomicRmw8AndU,
            Operator::I64AtomicRmw16AndU { .. } => OperatorSymbol::I64AtomicRmw16AndU,
            Operator::I64AtomicRmw32AndU { .. } => OperatorSymbol::I64AtomicRmw32AndU,
            Operator::I32AtomicRmwOr { .. } => OperatorSymbol::I32AtomicRmwOr,
            Operator::I64AtomicRmwOr { .. } => OperatorSymbol::I64AtomicRmwOr,
            Operator::I32AtomicRmw8OrU { .. } => OperatorSymbol::I32AtomicRmw8OrU,
            Operator::I32AtomicRmw16OrU { .. } => OperatorSymbol::I32AtomicRmw16OrU,
            Operator::I64AtomicRmw8OrU { .. } => OperatorSymbol::I64AtomicRmw8OrU,
            Operator::I64AtomicRmw16OrU { .. } => OperatorSymbol::I64AtomicRmw16OrU,
            Operator::I64AtomicRmw32OrU { .. } => OperatorSymbol::I64AtomicRmw32OrU,
            Operator::I32AtomicRmwXor { .. } => OperatorSymbol::I32AtomicRmwXor,
            Operator::I64AtomicRmwXor { .. } => OperatorSymbol::I64AtomicRmwXor,
            Operator::I32AtomicRmw8XorU { .. } => OperatorSymbol::I32AtomicRmw8XorU,
            Operator::I32AtomicRmw16XorU { .. } => OperatorSymbol::I32AtomicRmw16XorU,
            Operator::I64AtomicRmw8XorU { .. } => OperatorSymbol::I64AtomicRmw8XorU,
            Operator::I64AtomicRmw16XorU { .. } => OperatorSymbol::I64AtomicRmw16XorU,
            Operator::I64AtomicRmw32XorU { .. } => OperatorSymbol::I64AtomicRmw32XorU,
            Operator::I32AtomicRmwXchg { .. } => OperatorSymbol::I32AtomicRmwXchg,
            Operator::I64AtomicRmwXchg { .. } => OperatorSymbol::I64AtomicRmwXchg,
            Operator::I32AtomicRmw8XchgU { .. } => OperatorSymbol::I32AtomicRmw8XchgU,
            Operator::I32AtomicRmw16XchgU { .. } => OperatorSymbol::I32AtomicRmw16XchgU,
            Operator::I64AtomicRmw8XchgU { .. } => OperatorSymbol::I64AtomicRmw8XchgU,
            Operator::I64AtomicRmw16XchgU { .. } => OperatorSymbol::I64AtomicRmw16XchgU,
            Operator::I64AtomicRmw32XchgU { .. } => OperatorSymbol::I64AtomicRmw32XchgU,
            Operator::I32AtomicRmwCmpxchg { .. } => OperatorSymbol::I32AtomicRmwCmpxchg,
            Operator::I64AtomicRmwCmpxchg { .. } => OperatorSymbol::I64AtomicRmwCmpxchg,
            Operator::I32AtomicRmw8CmpxchgU { .. } => OperatorSymbol::I32AtomicRmw8CmpxchgU,
            Operator::I32AtomicRmw16CmpxchgU { .. } => OperatorSymbol::I32AtomicRmw16CmpxchgU,
            Operator::I64AtomicRmw8CmpxchgU { .. } => OperatorSymbol::I64AtomicRmw8CmpxchgU,
            Operator::I64AtomicRmw16CmpxchgU { .. } => OperatorSymbol::I64AtomicRmw16CmpxchgU,
            Operator::I64AtomicRmw32CmpxchgU { .. } => OperatorSymbol::I64AtomicRmw32CmpxchgU,

            // 0xFD operators
            // SIMD https://webassembly.github.io/simd/core/binary/instructions.html
            Operator::V128Load { .. } => OperatorSymbol::V128Load,
            Operator::V128Load8x8S { .. } => OperatorSymbol::V128Load8x8S,
            Operator::V128Load8x8U { .. } => OperatorSymbol::V128Load8x8U,
            Operator::V128Load16x4S { .. } => OperatorSymbol::V128Load16x4S,
            Operator::V128Load16x4U { .. } => OperatorSymbol::V128Load16x4U,
            Operator::V128Load32x2S { .. } => OperatorSymbol::V128Load32x2S,
            Operator::V128Load32x2U { .. } => OperatorSymbol::V128Load32x2U,
            Operator::V128Load8Splat { .. } => OperatorSymbol::V128Load8Splat,
            Operator::V128Load16Splat { .. } => OperatorSymbol::V128Load16Splat,
            Operator::V128Load32Splat { .. } => OperatorSymbol::V128Load32Splat,
            Operator::V128Load64Splat { .. } => OperatorSymbol::V128Load64Splat,
            Operator::V128Load32Zero { .. } => OperatorSymbol::V128Load32Zero,
            Operator::V128Load64Zero { .. } => OperatorSymbol::V128Load64Zero,
            Operator::V128Store { .. } => OperatorSymbol::V128Store,
            Operator::V128Load8Lane { .. } => OperatorSymbol::V128Load8Lane,
            Operator::V128Load16Lane { .. } => OperatorSymbol::V128Load16Lane,
            Operator::V128Load32Lane { .. } => OperatorSymbol::V128Load32Lane,
            Operator::V128Load64Lane { .. } => OperatorSymbol::V128Load64Lane,
            Operator::V128Store8Lane { .. } => OperatorSymbol::V128Store8Lane,
            Operator::V128Store16Lane { .. } => OperatorSymbol::V128Store16Lane,
            Operator::V128Store32Lane { .. } => OperatorSymbol::V128Store32Lane,
            Operator::V128Store64Lane { .. } => OperatorSymbol::V128Store64Lane,
            Operator::V128Const { .. } => OperatorSymbol::V128Const,
            Operator::I8x16Shuffle { .. } => OperatorSymbol::I8x16Shuffle,
            Operator::I8x16ExtractLaneS { .. } => OperatorSymbol::I8x16ExtractLaneS,
            Operator::I8x16ExtractLaneU { .. } => OperatorSymbol::I8x16ExtractLaneU,
            Operator::I8x16ReplaceLane { .. } => OperatorSymbol::I8x16ReplaceLane,
            Operator::I16x8ExtractLaneS { .. } => OperatorSymbol::I16x8ExtractLaneS,
            Operator::I16x8ExtractLaneU { .. } => OperatorSymbol::I16x8ExtractLaneU,
            Operator::I16x8ReplaceLane { .. } => OperatorSymbol::I16x8ReplaceLane,
            Operator::I32x4ExtractLane { .. } => OperatorSymbol::I32x4ExtractLane,
            Operator::I32x4ReplaceLane { .. } => OperatorSymbol::I32x4ReplaceLane,
            Operator::I64x2ExtractLane { .. } => OperatorSymbol::I64x2ExtractLane,
            Operator::I64x2ReplaceLane { .. } => OperatorSymbol::I64x2ReplaceLane,
            Operator::F32x4ExtractLane { .. } => OperatorSymbol::F32x4ExtractLane,
            Operator::F32x4ReplaceLane { .. } => OperatorSymbol::F32x4ReplaceLane,
            Operator::F64x2ExtractLane { .. } => OperatorSymbol::F64x2ExtractLane,
            Operator::F64x2ReplaceLane { .. } => OperatorSymbol::F64x2ReplaceLane,
            Operator::I8x16Swizzle => OperatorSymbol::I8x16Swizzle,
            Operator::I8x16Splat => OperatorSymbol::I8x16Splat,
            Operator::I16x8Splat => OperatorSymbol::I16x8Splat,
            Operator::I32x4Splat => OperatorSymbol::I32x4Splat,
            Operator::I64x2Splat => OperatorSymbol::I64x2Splat,
            Operator::F32x4Splat => OperatorSymbol::F32x4Splat,
            Operator::F64x2Splat => OperatorSymbol::F64x2Splat,
            Operator::I8x16Eq => OperatorSymbol::I8x16Eq,
            Operator::I8x16Ne => OperatorSymbol::I8x16Ne,
            Operator::I8x16LtS => OperatorSymbol::I8x16LtS,
            Operator::I8x16LtU => OperatorSymbol::I8x16LtU,
            Operator::I8x16GtS => OperatorSymbol::I8x16GtS,
            Operator::I8x16GtU => OperatorSymbol::I8x16GtU,
            Operator::I8x16LeS => OperatorSymbol::I8x16LeS,
            Operator::I8x16LeU => OperatorSymbol::I8x16LeU,
            Operator::I8x16GeS => OperatorSymbol::I8x16GeS,
            Operator::I8x16GeU => OperatorSymbol::I8x16GeU,
            Operator::I16x8Eq => OperatorSymbol::I16x8Eq,
            Operator::I16x8Ne => OperatorSymbol::I16x8Ne,
            Operator::I16x8LtS => OperatorSymbol::I16x8LtS,
            Operator::I16x8LtU => OperatorSymbol::I16x8LtU,
            Operator::I16x8GtS => OperatorSymbol::I16x8GtS,
            Operator::I16x8GtU => OperatorSymbol::I16x8GtU,
            Operator::I16x8LeS => OperatorSymbol::I16x8LeS,
            Operator::I16x8LeU => OperatorSymbol::I16x8LeU,
            Operator::I16x8GeS => OperatorSymbol::I16x8GeS,
            Operator::I16x8GeU => OperatorSymbol::I16x8GeU,
            Operator::I32x4Eq => OperatorSymbol::I32x4Eq,
            Operator::I32x4Ne => OperatorSymbol::I32x4Ne,
            Operator::I32x4LtS => OperatorSymbol::I32x4LtS,
            Operator::I32x4LtU => OperatorSymbol::I32x4LtU,
            Operator::I32x4GtS => OperatorSymbol::I32x4GtS,
            Operator::I32x4GtU => OperatorSymbol::I32x4GtU,
            Operator::I32x4LeS => OperatorSymbol::I32x4LeS,
            Operator::I32x4LeU => OperatorSymbol::I32x4LeU,
            Operator::I32x4GeS => OperatorSymbol::I32x4GeS,
            Operator::I32x4GeU => OperatorSymbol::I32x4GeU,
            Operator::I64x2Eq => OperatorSymbol::I64x2Eq,
            Operator::I64x2Ne => OperatorSymbol::I64x2Ne,
            Operator::I64x2LtS => OperatorSymbol::I64x2LtS,
            Operator::I64x2GtS => OperatorSymbol::I64x2GtS,
            Operator::I64x2LeS => OperatorSymbol::I64x2LeS,
            Operator::I64x2GeS => OperatorSymbol::I64x2GeS,
            Operator::F32x4Eq => OperatorSymbol::F32x4Eq,
            Operator::F32x4Ne => OperatorSymbol::F32x4Ne,
            Operator::F32x4Lt => OperatorSymbol::F32x4Lt,
            Operator::F32x4Gt => OperatorSymbol::F32x4Gt,
            Operator::F32x4Le => OperatorSymbol::F32x4Le,
            Operator::F32x4Ge => OperatorSymbol::F32x4Ge,
            Operator::F64x2Eq => OperatorSymbol::F64x2Eq,
            Operator::F64x2Ne => OperatorSymbol::F64x2Ne,
            Operator::F64x2Lt => OperatorSymbol::F64x2Lt,
            Operator::F64x2Gt => OperatorSymbol::F64x2Gt,
            Operator::F64x2Le => OperatorSymbol::F64x2Le,
            Operator::F64x2Ge => OperatorSymbol::F64x2Ge,
            Operator::V128Not => OperatorSymbol::V128Not,
            Operator::V128And => OperatorSymbol::V128And,
            Operator::V128AndNot => OperatorSymbol::V128AndNot,
            Operator::V128Or => OperatorSymbol::V128Or,
            Operator::V128Xor => OperatorSymbol::V128Xor,
            Operator::V128Bitselect => OperatorSymbol::V128Bitselect,
            Operator::V128AnyTrue => OperatorSymbol::V128AnyTrue,
            Operator::I8x16Abs => OperatorSymbol::I8x16Abs,
            Operator::I8x16Neg => OperatorSymbol::I8x16Neg,
            Operator::I8x16Popcnt => OperatorSymbol::I8x16Popcnt,
            Operator::I8x16AllTrue => OperatorSymbol::I8x16AllTrue,
            Operator::I8x16Bitmask => OperatorSymbol::I8x16Bitmask,
            Operator::I8x16NarrowI16x8S => OperatorSymbol::I8x16NarrowI16x8S,
            Operator::I8x16NarrowI16x8U => OperatorSymbol::I8x16NarrowI16x8U,
            Operator::I8x16Shl => OperatorSymbol::I8x16Shl,
            Operator::I8x16ShrS => OperatorSymbol::I8x16ShrS,
            Operator::I8x16ShrU => OperatorSymbol::I8x16ShrU,
            Operator::I8x16Add => OperatorSymbol::I8x16Add,
            Operator::I8x16AddSatS => OperatorSymbol::I8x16AddSatS,
            Operator::I8x16AddSatU => OperatorSymbol::I8x16AddSatU,
            Operator::I8x16Sub => OperatorSymbol::I8x16Sub,
            Operator::I8x16SubSatS => OperatorSymbol::I8x16SubSatS,
            Operator::I8x16SubSatU => OperatorSymbol::I8x16SubSatU,
            Operator::I8x16MinS => OperatorSymbol::I8x16MinS,
            Operator::I8x16MinU => OperatorSymbol::I8x16MinU,
            Operator::I8x16MaxS => OperatorSymbol::I8x16MaxS,
            Operator::I8x16MaxU => OperatorSymbol::I8x16MaxU,
            Operator::I8x16RoundingAverageU => OperatorSymbol::I8x16RoundingAverageU,
            Operator::I16x8ExtAddPairwiseI8x16S => OperatorSymbol::I16x8ExtAddPairwiseI8x16S,
            Operator::I16x8ExtAddPairwiseI8x16U => OperatorSymbol::I16x8ExtAddPairwiseI8x16U,
            Operator::I16x8Abs => OperatorSymbol::I16x8Abs,
            Operator::I16x8Neg => OperatorSymbol::I16x8Neg,
            Operator::I16x8Q15MulrSatS => OperatorSymbol::I16x8Q15MulrSatS,
            Operator::I16x8AllTrue => OperatorSymbol::I16x8AllTrue,
            Operator::I16x8Bitmask => OperatorSymbol::I16x8Bitmask,
            Operator::I16x8NarrowI32x4S => OperatorSymbol::I16x8NarrowI32x4S,
            Operator::I16x8NarrowI32x4U => OperatorSymbol::I16x8NarrowI32x4U,
            Operator::I16x8ExtendLowI8x16S => OperatorSymbol::I16x8ExtendLowI8x16S,
            Operator::I16x8ExtendHighI8x16S => OperatorSymbol::I16x8ExtendHighI8x16S,
            Operator::I16x8ExtendLowI8x16U => OperatorSymbol::I16x8ExtendLowI8x16U,
            Operator::I16x8ExtendHighI8x16U => OperatorSymbol::I16x8ExtendHighI8x16U,
            Operator::I16x8Shl => OperatorSymbol::I16x8Shl,
            Operator::I16x8ShrS => OperatorSymbol::I16x8ShrS,
            Operator::I16x8ShrU => OperatorSymbol::I16x8ShrU,
            Operator::I16x8Add => OperatorSymbol::I16x8Add,
            Operator::I16x8AddSatS => OperatorSymbol::I16x8AddSatS,
            Operator::I16x8AddSatU => OperatorSymbol::I16x8AddSatU,
            Operator::I16x8Sub => OperatorSymbol::I16x8Sub,
            Operator::I16x8SubSatS => OperatorSymbol::I16x8SubSatS,
            Operator::I16x8SubSatU => OperatorSymbol::I16x8SubSatU,
            Operator::I16x8Mul => OperatorSymbol::I16x8Mul,
            Operator::I16x8MinS => OperatorSymbol::I16x8MinS,
            Operator::I16x8MinU => OperatorSymbol::I16x8MinU,
            Operator::I16x8MaxS => OperatorSymbol::I16x8MaxS,
            Operator::I16x8MaxU => OperatorSymbol::I16x8MaxU,
            Operator::I16x8RoundingAverageU => OperatorSymbol::I16x8RoundingAverageU,
            Operator::I16x8ExtMulLowI8x16S => OperatorSymbol::I16x8ExtMulLowI8x16S,
            Operator::I16x8ExtMulHighI8x16S => OperatorSymbol::I16x8ExtMulHighI8x16S,
            Operator::I16x8ExtMulLowI8x16U => OperatorSymbol::I16x8ExtMulLowI8x16U,
            Operator::I16x8ExtMulHighI8x16U => OperatorSymbol::I16x8ExtMulHighI8x16U,
            Operator::I32x4ExtAddPairwiseI16x8S => OperatorSymbol::I32x4ExtAddPairwiseI16x8S,
            Operator::I32x4ExtAddPairwiseI16x8U => OperatorSymbol::I32x4ExtAddPairwiseI16x8U,
            Operator::I32x4Abs => OperatorSymbol::I32x4Abs,
            Operator::I32x4Neg => OperatorSymbol::I32x4Neg,
            Operator::I32x4AllTrue => OperatorSymbol::I32x4AllTrue,
            Operator::I32x4Bitmask => OperatorSymbol::I32x4Bitmask,
            Operator::I32x4ExtendLowI16x8S => OperatorSymbol::I32x4ExtendLowI16x8S,
            Operator::I32x4ExtendHighI16x8S => OperatorSymbol::I32x4ExtendHighI16x8S,
            Operator::I32x4ExtendLowI16x8U => OperatorSymbol::I32x4ExtendLowI16x8U,
            Operator::I32x4ExtendHighI16x8U => OperatorSymbol::I32x4ExtendHighI16x8U,
            Operator::I32x4Shl => OperatorSymbol::I32x4Shl,
            Operator::I32x4ShrS => OperatorSymbol::I32x4ShrS,
            Operator::I32x4ShrU => OperatorSymbol::I32x4ShrU,
            Operator::I32x4Add => OperatorSymbol::I32x4Add,
            Operator::I32x4Sub => OperatorSymbol::I32x4Sub,
            Operator::I32x4Mul => OperatorSymbol::I32x4Mul,
            Operator::I32x4MinS => OperatorSymbol::I32x4MinS,
            Operator::I32x4MinU => OperatorSymbol::I32x4MinU,
            Operator::I32x4MaxS => OperatorSymbol::I32x4MaxS,
            Operator::I32x4MaxU => OperatorSymbol::I32x4MaxU,
            Operator::I32x4DotI16x8S => OperatorSymbol::I32x4DotI16x8S,
            Operator::I32x4ExtMulLowI16x8S => OperatorSymbol::I32x4ExtMulLowI16x8S,
            Operator::I32x4ExtMulHighI16x8S => OperatorSymbol::I32x4ExtMulHighI16x8S,
            Operator::I32x4ExtMulLowI16x8U => OperatorSymbol::I32x4ExtMulLowI16x8U,
            Operator::I32x4ExtMulHighI16x8U => OperatorSymbol::I32x4ExtMulHighI16x8U,
            Operator::I64x2Abs => OperatorSymbol::I64x2Abs,
            Operator::I64x2Neg => OperatorSymbol::I64x2Neg,
            Operator::I64x2AllTrue => OperatorSymbol::I64x2AllTrue,
            Operator::I64x2Bitmask => OperatorSymbol::I64x2Bitmask,
            Operator::I64x2ExtendLowI32x4S => OperatorSymbol::I64x2ExtendLowI32x4S,
            Operator::I64x2ExtendHighI32x4S => OperatorSymbol::I64x2ExtendHighI32x4S,
            Operator::I64x2ExtendLowI32x4U => OperatorSymbol::I64x2ExtendLowI32x4U,
            Operator::I64x2ExtendHighI32x4U => OperatorSymbol::I64x2ExtendHighI32x4U,
            Operator::I64x2Shl => OperatorSymbol::I64x2Shl,
            Operator::I64x2ShrS => OperatorSymbol::I64x2ShrS,
            Operator::I64x2ShrU => OperatorSymbol::I64x2ShrU,
            Operator::I64x2Add => OperatorSymbol::I64x2Add,
            Operator::I64x2Sub => OperatorSymbol::I64x2Sub,
            Operator::I64x2Mul => OperatorSymbol::I64x2Mul,
            Operator::I64x2ExtMulLowI32x4S => OperatorSymbol::I64x2ExtMulLowI32x4S,
            Operator::I64x2ExtMulHighI32x4S => OperatorSymbol::I64x2ExtMulHighI32x4S,
            Operator::I64x2ExtMulLowI32x4U => OperatorSymbol::I64x2ExtMulLowI32x4U,
            Operator::I64x2ExtMulHighI32x4U => OperatorSymbol::I64x2ExtMulHighI32x4U,
            Operator::F32x4Ceil => OperatorSymbol::F32x4Ceil,
            Operator::F32x4Floor => OperatorSymbol::F32x4Floor,
            Operator::F32x4Trunc => OperatorSymbol::F32x4Trunc,
            Operator::F32x4Nearest => OperatorSymbol::F32x4Nearest,
            Operator::F32x4Abs => OperatorSymbol::F32x4Abs,
            Operator::F32x4Neg => OperatorSymbol::F32x4Neg,
            Operator::F32x4Sqrt => OperatorSymbol::F32x4Sqrt,
            Operator::F32x4Add => OperatorSymbol::F32x4Add,
            Operator::F32x4Sub => OperatorSymbol::F32x4Sub,
            Operator::F32x4Mul => OperatorSymbol::F32x4Mul,
            Operator::F32x4Div => OperatorSymbol::F32x4Div,
            Operator::F32x4Min => OperatorSymbol::F32x4Min,
            Operator::F32x4Max => OperatorSymbol::F32x4Max,
            Operator::F32x4PMin => OperatorSymbol::F32x4PMin,
            Operator::F32x4PMax => OperatorSymbol::F32x4PMax,
            Operator::F64x2Ceil => OperatorSymbol::F64x2Ceil,
            Operator::F64x2Floor => OperatorSymbol::F64x2Floor,
            Operator::F64x2Trunc => OperatorSymbol::F64x2Trunc,
            Operator::F64x2Nearest => OperatorSymbol::F64x2Nearest,
            Operator::F64x2Abs => OperatorSymbol::F64x2Abs,
            Operator::F64x2Neg => OperatorSymbol::F64x2Neg,
            Operator::F64x2Sqrt => OperatorSymbol::F64x2Sqrt,
            Operator::F64x2Add => OperatorSymbol::F64x2Add,
            Operator::F64x2Sub => OperatorSymbol::F64x2Sub,
            Operator::F64x2Mul => OperatorSymbol::F64x2Mul,
            Operator::F64x2Div => OperatorSymbol::F64x2Div,
            Operator::F64x2Min => OperatorSymbol::F64x2Min,
            Operator::F64x2Max => OperatorSymbol::F64x2Max,
            Operator::F64x2PMin => OperatorSymbol::F64x2PMin,
            Operator::F64x2PMax => OperatorSymbol::F64x2PMax,
            Operator::I32x4TruncSatF32x4S => OperatorSymbol::I32x4TruncSatF32x4S,
            Operator::I32x4TruncSatF32x4U => OperatorSymbol::I32x4TruncSatF32x4U,
            Operator::F32x4ConvertI32x4S => OperatorSymbol::F32x4ConvertI32x4S,
            Operator::F32x4ConvertI32x4U => OperatorSymbol::F32x4ConvertI32x4U,
            Operator::I32x4TruncSatF64x2SZero => OperatorSymbol::I32x4TruncSatF64x2SZero,
            Operator::I32x4TruncSatF64x2UZero => OperatorSymbol::I32x4TruncSatF64x2UZero,
            Operator::F64x2ConvertLowI32x4S => OperatorSymbol::F64x2ConvertLowI32x4S,
            Operator::F64x2ConvertLowI32x4U => OperatorSymbol::F64x2ConvertLowI32x4U,
            Operator::F32x4DemoteF64x2Zero => OperatorSymbol::F32x4DemoteF64x2Zero,
            Operator::F64x2PromoteLowF32x4 => OperatorSymbol::F64x2PromoteLowF32x4,

            // unsorted
            Operator::I8x16RelaxedSwizzle => OperatorSymbol::I8x16RelaxedSwizzle,
            Operator::I32x4RelaxedTruncSatF32x4S => OperatorSymbol::I32x4RelaxedTruncSatF32x4S,
            Operator::I32x4RelaxedTruncSatF32x4U => OperatorSymbol::I32x4RelaxedTruncSatF32x4U,
            Operator::I32x4RelaxedTruncSatF64x2SZero => {
                OperatorSymbol::I32x4RelaxedTruncSatF64x2SZero
            }
            Operator::I32x4RelaxedTruncSatF64x2UZero => {
                OperatorSymbol::I32x4RelaxedTruncSatF64x2UZero
            }
            Operator::F32x4Fma => OperatorSymbol::F32x4Fma,
            Operator::F32x4Fms => OperatorSymbol::F32x4Fms,
            Operator::F64x2Fma => OperatorSymbol::F64x2Fma,
            Operator::F64x2Fms => OperatorSymbol::F64x2Fms,
            Operator::I8x16LaneSelect => OperatorSymbol::I8x16LaneSelect,
            Operator::I16x8LaneSelect => OperatorSymbol::I16x8LaneSelect,
            Operator::I32x4LaneSelect => OperatorSymbol::I32x4LaneSelect,
            Operator::I64x2LaneSelect => OperatorSymbol::I64x2LaneSelect,
            Operator::F32x4RelaxedMin => OperatorSymbol::F32x4RelaxedMin,
            Operator::F32x4RelaxedMax => OperatorSymbol::F32x4RelaxedMax,
            Operator::F64x2RelaxedMin => OperatorSymbol::F64x2RelaxedMin,
            Operator::F64x2RelaxedMax => OperatorSymbol::F64x2RelaxedMax,
        }
    }
}

impl From<Operator<'_>> for OperatorSymbol {
    fn from(op: Operator<'_>) -> Self {
        op.into()
    }
}
