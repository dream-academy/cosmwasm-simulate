version: 2.1

orbs:
  codecov: codecov/codecov@3.2.0

workflows:
  test:
    # Keep those job names in sync with .mergify.yml
    jobs:
      - arm64
      - package_crypto
      - package_check
      - package_schema
      - package_schema_derive
      - package_std
      - package_storage
      - package_vm
      - package_profiler
      - contract_burner
      - contract_crypto_verify
      - contract_cyberpunk
      - contract_hackatom
      - contract_ibc_reflect
      - contract_ibc_reflect_send
      - contract_floaty
      - contract_queue
      - contract_reflect
      - contract_staking
      - fmt
      - fmt_extra
      - clippy:
          matrix:
            parameters:
              # Run with MSRV and some modern stable Rust
              rust-version: ["1.59.0", "1.64.0"]
      - benchmarking:
          requires:
            - package_vm
            - package_crypto
          filters:
            branches:
              only:
                # Long living branches
                - main
                - /^[0-9]+\.[0-9]+$/
                # Add your branch here if benchmarking matters to your work
                - benchmarking
                - update-wasmer
                - metering-restart
                - load-wasm-speed
                - cache-analyze
                - fix-benches
                - benchmark_argon2
                - get_instance-multi-threaded-benchmark-multi-contract
      - coverage
  deploy:
    jobs:
      - build_and_upload_devcontracts:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/
  cron_jobs:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - deadlinks

jobs:
  arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.large
    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            wget https://static.rust-lang.org/rustup/dist/aarch64-unknown-linux-gnu/rustup-init
            chmod +x rustup-init
            ./rustup-init -y --default-toolchain 1.59.0 --profile minimal
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-arm64-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: "contracts/crypto-verify: integration-test"
          working_directory: ~/project/contracts/crypto-verify
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/hackatom: integration-test"
          working_directory: ~/project/contracts/hackatom
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/queue: integration-test"
          working_directory: ~/project/contracts/queue
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/reflect: integration-test"
          working_directory: ~/project/contracts/reflect
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/staking: integration-test"
          working_directory: ~/project/contracts/staking
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "packages/crypto: test"
          working_directory: ~/project/packages/crypto
          command: cargo test --locked
      - run:
          name: "packages/std: test"
          working_directory: ~/project/packages/std
          command: cargo test --locked
      - run:
          name: "packages/vm: test"
          working_directory: ~/project/packages/vm
          # use all features
          command: cargo test --locked --features iterator,staking,stargate
      - save_cache:
          paths:
            - ~/.cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-arm64-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_crypto:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_crypto-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/crypto
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/crypto
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_crypto-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_check:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_check-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/check
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/check
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_check-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_schema:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_schema-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/schema
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/schema
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_schema-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_schema_derive:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_schema_derive-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/schema-derive
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/schema-derive
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_schema_derive-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_std:
    docker:
      - image: rust:1.59.0
    environment:
      # Limit the number of parallel jobs to avoid OOM crashes during doc testing
      RUST_TEST_THREADS: 8
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_std-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build library for native target (no features)
          working_directory: ~/project/packages/std
          command: cargo build --locked --no-default-features
      - run:
          name: Build library for wasm target (no features)
          working_directory: ~/project/packages/std
          command: cargo wasm --locked --no-default-features
      - run:
          name: Run unit tests (no features)
          working_directory: ~/project/packages/std
          command: cargo test --locked --no-default-features
      - run:
          name: Build library for native target (all features)
          working_directory: ~/project/packages/std
          command: cargo build --locked --features abort,iterator,staking,stargate,cosmwasm_1_1
      - run:
          name: Build library for wasm target (all features)
          working_directory: ~/project/packages/std
          command: cargo wasm --locked --features abort,iterator,staking,stargate,cosmwasm_1_1
      - run:
          name: Run unit tests (all features)
          working_directory: ~/project/packages/std
          command: cargo test --locked --features abort,iterator,staking,stargate,cosmwasm_1_1
      - run:
          name: Build and run schema generator
          working_directory: ~/project/packages/std
          command: cargo schema --features cosmwasm_1_1 --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_std-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_storage:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_storage-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build library for native target
          working_directory: ~/project/packages/storage
          command: cargo build --locked
      - run:
          name: Run unit tests
          working_directory: ~/project/packages/storage
          command: cargo test --locked
      - run:
          name: Run unit tests (with iterator support)
          working_directory: ~/project/packages/storage
          command: cargo test --locked --features iterator
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_storage-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_vm:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_vm-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/vm
          command: cargo build --locked
      - run:
          name: Build with all features
          working_directory: ~/project/packages/vm
          command: cargo build --locked --features allow_interface_version_7,iterator,staking,stargate
      - run:
          name: Test
          working_directory: ~/project/packages/vm
          command: cargo test --locked
      - run:
          name: Test with all features
          working_directory: ~/project/packages/vm
          command: cargo test --locked --features allow_interface_version_7,iterator,staking,stargate
      - run:
          name: Test multi threaded cache
          working_directory: ~/project/packages/vm
          command: |
            cargo build --locked --example multi_threaded_cache
            time ../../target/debug/examples/multi_threaded_cache >/dev/null
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_vm-rust:1.59.0-{{ checksum "Cargo.lock" }}

  package_profiler:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_profiler-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/profiler
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/profiler
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_profiler-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_burner:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/burner
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_burner-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_burner-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_crypto_verify:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/crypto-verify
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_crypto_verify-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_crypto_verify-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_cyberpunk:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/cyberpunk
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_cyberpunk-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_cyberpunk-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_hackatom:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/hackatom
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_hackatom-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests
          command: cargo integration-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_hackatom-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_ibc_reflect:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/ibc-reflect
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_ibc_reflect-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_ibc_reflect-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_ibc_reflect_send:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/ibc-reflect-send
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_ibc_reflect_send-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_ibc_reflect_send-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_floaty:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/floaty
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_floaty-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_floaty-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_queue:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/queue
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_queue-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_queue-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_reflect:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/reflect
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_reflect-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_reflect-rust:1.59.0-{{ checksum "Cargo.lock" }}

  contract_staking:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/staking
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_staking-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_staking-rust:1.59.0-{{ checksum "Cargo.lock" }}

  fmt:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-fmt-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Check formatting of workspace
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract burner
          working_directory: ~/project/contracts/burner
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract crypto-verify
          working_directory: ~/project/contracts/crypto-verify
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract hackatom
          working_directory: ~/project/contracts/hackatom
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract floaty
          working_directory: ~/project/contracts/floaty
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract reflect
          working_directory: ~/project/contracts/reflect
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract queue
          working_directory: ~/project/contracts/queue
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract staking
          working_directory: ~/project/contracts/staking
          command: cargo fmt -- --check
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-fmt-rust:1.59.0-{{ checksum "Cargo.lock" }}

  fmt_extra:
    docker:
      - image: node:16.3.0-buster
    steps:
      - checkout
      - run:
          name: Install shfmt
          command: curl -sS https://webinstall.dev/shfmt | bash
      - run:
          name: Validate Markdown files
          command: devtools/format_md.sh -c
      - run:
          name: Validate shell scripts
          command: PATH="/root/.local/bin:$PATH" devtools/format_sh.sh -c
      - run:
          name: Validate YAML files
          command: devtools/format_yml.sh -c

  deadlinks:
    docker:
      - image: rust:1.59.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-deadlinks-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Generate docs
          command: cargo doc
      - run:
          name: Install pip
          command: apt update && apt install -y python3-pip
      - run:
          name: Install dependencies
          command: pip3 install requests bs4
      - run:
          name: Check dead links
          command: devtools/deadlinks.py
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - /root/.cache/pip
          key: cargocache-v2-deadlinks-rust:1.59.0-{{ checksum "Cargo.lock" }}

  clippy:
    parameters:
      rust-version:
        type: string
    docker:
      # In this job we use the latest Rust stable in order to check against the
      # most recent code style recommendations.
      - image: rust:<< parameters.rust-version >>
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version && cargo --version
      - restore_cache:
          keys:
            - cargocache-v2-clippy-rust:<< parameters.rust-version >>-{{ checksum "Cargo.lock" }}-{{ checksum "contracts/burner/Cargo.lock" }}-{{ checksum "contracts/crypto-verify/Cargo.lock" }}-{{ checksum "contracts/hackatom/Cargo.lock" }}-{{ checksum "contracts/ibc-reflect/Cargo.lock" }}-{{ checksum "contracts/ibc-reflect-send/Cargo.lock" }}-{{ checksum "contracts/queue/Cargo.lock" }}-{{ checksum "contracts/reflect/Cargo.lock" }}-{{ checksum "contracts/staking/Cargo.lock" }}
      - run:
          name: Add clippy component
          command: rustup component add clippy
      #
      # Workspace packages
      #
      - run:
          name: Clippy linting on crypto
          working_directory: ~/project/packages/crypto
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on derive
          working_directory: ~/project/packages/derive
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on profiler
          working_directory: ~/project/packages/profiler
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on schema
          working_directory: ~/project/packages/schema
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on schema-derive
          working_directory: ~/project/packages/schema-derive
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on std (no feature flags)
          working_directory: ~/project/packages/std
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on std (all feature flags)
          working_directory: ~/project/packages/std
          command: cargo clippy --all-targets --features abort,iterator,staking,stargate -- -D warnings
      - run:
          name: Clippy linting on storage (no feature flags)
          working_directory: ~/project/packages/storage
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on storage (all feature flags)
          working_directory: ~/project/packages/storage
          command: cargo clippy --all-targets --features iterator -- -D warnings
      - run:
          name: Clippy linting on vm (no feature flags)
          working_directory: ~/project/packages/vm
          command: cargo clippy --all-targets --no-default-features -- -D warnings
      - run:
          name: Clippy linting on vm (all feature flags)
          working_directory: ~/project/packages/vm
          command: cargo clippy --all-targets --features iterator,staking,stargate -- -D warnings
      #
      # Contracts
      #
      - run:
          name: Clippy linting on burner
          working_directory: ~/project/contracts/burner
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/burner.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on crypto-verify
          working_directory: ~/project/contracts/crypto-verify
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/crypto_verify.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on cyberpunk
          working_directory: ~/project/contracts/cyberpunk
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/cyberpunk.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on hackatom
          working_directory: ~/project/contracts/hackatom
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/hackatom.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on ibc-reflect
          working_directory: ~/project/contracts/ibc-reflect
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/ibc_reflect.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on ibc-reflect-send
          working_directory: ~/project/contracts/ibc-reflect-send
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/ibc_reflect_send.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on floaty
          working_directory: ~/project/contracts/floaty
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/floaty.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on queue
          working_directory: ~/project/contracts/queue
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/queue.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on reflect
          working_directory: ~/project/contracts/reflect
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/reflect.wasm
            cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on staking
          working_directory: ~/project/contracts/staking
          command: |
            mkdir -p target/wasm32-unknown-unknown/release
            touch target/wasm32-unknown-unknown/release/staking.wasm
            cargo clippy --all-targets -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - contracts/burner/target/debug/.fingerprint
            - contracts/burner/target/debug/build
            - contracts/burner/target/debug/deps
            - contracts/crypto-verify/target/debug/.fingerprint
            - contracts/crypto-verify/target/debug/build
            - contracts/crypto-verify/target/debug/deps
            - contracts/hackatom/target/debug/.fingerprint
            - contracts/hackatom/target/debug/build
            - contracts/hackatom/target/debug/deps
            - contracts/ibc-reflect/target/debug/.fingerprint
            - contracts/ibc-reflect/target/debug/build
            - contracts/ibc-reflect/target/debug/deps
            - contracts/ibc-reflect-send/target/debug/.fingerprint
            - contracts/ibc-reflect-send/target/debug/build
            - contracts/ibc-reflect-send/target/debug/deps
            - contracts/queue/target/debug/.fingerprint
            - contracts/queue/target/debug/build
            - contracts/queue/target/debug/deps
            - contracts/reflect/target/debug/.fingerprint
            - contracts/reflect/target/debug/build
            - contracts/reflect/target/debug/deps
            - contracts/staking/target/debug/.fingerprint
            - contracts/staking/target/debug/build
            - contracts/staking/target/debug/deps
          key: cargocache-v2-clippy-rust:<< parameters.rust-version >>-{{ checksum "Cargo.lock" }}-{{ checksum "contracts/burner/Cargo.lock" }}-{{ checksum "contracts/crypto-verify/Cargo.lock" }}-{{ checksum "contracts/hackatom/Cargo.lock" }}-{{ checksum "contracts/ibc-reflect/Cargo.lock" }}-{{ checksum "contracts/ibc-reflect-send/Cargo.lock" }}-{{ checksum "contracts/queue/Cargo.lock" }}-{{ checksum "contracts/reflect/Cargo.lock" }}-{{ checksum "contracts/staking/Cargo.lock" }}

  benchmarking:
    docker:
      - image: rust:1.59.0
    environment:
      RUST_BACKTRACE: 1
    steps:
      - checkout
      - run:
          name: Version information (default; stable)
          command: rustc --version && cargo --version
      - restore_cache:
          keys:
            - cargocache-v2-benchmarking-rust:1.59.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Run vm benchmarks (Singlepass)
          working_directory: ~/project/packages/vm
          command: cargo bench --no-default-features -- --color never --save-baseline singlepass
      - run:
          name: Run crypto benchmarks
          working_directory: ~/project/packages/crypto
          command: cargo bench -- --color never --save-baseline crypto
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
          key: cargocache-v2-benchmarking-rust:1.59.0-{{ checksum "Cargo.lock" }}

  coverage:
    # https://circleci.com/developer/images?imageType=machine
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - run:
          name: Run tests with coverage
          # See https://github.com/xd009642/tarpaulin/blob/develop/CHANGELOG.md and https://hub.docker.com/r/xd009642/tarpaulin/tags
          # for tarpaulin versions.
          command: |
            mkdir -p reports/crypto
            mkdir -p reports/derive
            mkdir -p reports/schema
            mkdir -p reports/std
            mkdir -p reports/storage
            docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin:0.21.0 \
              sh -c "cargo tarpaulin --skip-clean --out Xml --output-dir reports/crypto --packages cosmwasm-crypto && cargo tarpaulin --skip-clean --out Xml --output-dir reports/derive --packages cosmwasm-derive && cargo tarpaulin --skip-clean --out Xml --output-dir reports/schema --packages cosmwasm-schema && cargo tarpaulin --skip-clean --out Xml --output-dir reports/std --packages cosmwasm-std && cargo tarpaulin --skip-clean --out Xml --output-dir reports/storage --packages cosmwasm-storage"
      - codecov/upload:
          file: reports/crypto/cobertura.xml
          flags: cosmwasm-crypto
      - codecov/upload:
          file: reports/derive/cobertura.xml
          flags: cosmwasm-derive
      - codecov/upload:
          file: reports/schema/cobertura.xml
          flags: cosmwasm-schema
      - codecov/upload:
          file: reports/std/cobertura.xml
          flags: cosmwasm-std
      - codecov/upload:
          file: reports/storage/cobertura.xml
          flags: cosmwasm-storage

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_devcontracts:
    docker:
      # Image from https://github.com/cibuilds/github, based on alpine
      - image: cibuilds/github:0.13
    steps:
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - setup_remote_docker
      - checkout
      - run:
          # We cannot mount local folders, see https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Prepare volume with source code
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v /code --name with_code alpine /bin/true
            # copy a config file into this volume
            docker cp ./Cargo.lock with_code:/code
            docker cp ./Cargo.toml with_code:/code
            docker cp ./contracts with_code:/code
            docker cp ./packages with_code:/code
      - run:
          name: Build development contracts
          command: |
            echo "Building all contracts under ./contracts"
            docker run --volumes-from with_code cosmwasm/rust-optimizer:0.12.5 ./contracts/*/
      - run:
          name: Check development contracts
          command: |
            echo "Checking all contracts under ./artifacts"
            docker run --volumes-from with_code rust:1.59.0 \
              /bin/bash -e -c 'export GLOBIGNORE="artifacts/floaty.wasm"; cd ./code; cargo run --bin cosmwasm-check artifacts/*.wasm'
            docker cp with_code:/code/artifacts .
      - run:
          name: Publish artifacts on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -delete \
              "$TAG" ./artifacts/
